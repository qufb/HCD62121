# HCD62121 sleigh include file

# TODO: shifts should cross registers
# TODO: implement adb + sbb
# TODO: handle DSIZE

# See hcd62121.pspec
@define IN0  "0x00"
@define OPT  "0x01"
@define PORT "0x02"
@define KI   "0x08"
@define KOH  "0x09"
@define KOL  "0x0a"

define pcodeop port_ctrl;
define pcodeop timer_ctrl;
define pcodeop timer_set;
define pcodeop timer_wait;
define pcodeop unk_83; # Used in CFX9850 CPU ROM
define pcodeop unk_8e;
define pcodeop unk_b9;
define pcodeop unk_bc;
define pcodeop unk_fc;
define pcodeop unk_fd;

define pcodeop segment;    # Define special pcodeop that calculates the RAM address
                           # given the segment selector and offset as input

define token ins8 (8)
   flags_00_02 = (0,2)
   imm_00_03 = (0,3)
   imm_00_06 = (0,6)
   op_07 = (7,7)
   op_00_07 = (0,7)
   op_00_05 = (0,5)
   op_03_07 = (3,7)
   op_04_07 = (4,7)
   op1_type = (6,6)
   op2_type = (7,7)
   r8 = (0,7)
   r8_2 = (0,7)
   r8_00_06 = (0,6)
   size_00_02 = (0,2)
;

define token ins16 (16)
    w_op_15 = (15,15)
    w_mode_14 = (14,14)
    w_op_08_13 = (8,13)
    w_op_10_13 = (10,13)
    w_rep_08_09 = (8,9)
    w_type_07 = (7,7)
    w_r8_00_06 = (0,6)
    w_mem_r8_00_06 = (0,6)
;

define token data8 (8)
   imm8 = (0,7)
   imm8_2 = (0,7)
   imm8_3 = (0,7)
   imm8_4 = (0,7)
   imm8_5 = (0,7)
   imm8_6 = (0,7)
   imm8_7 = (0,7)
   imm8_8 = (0,7)
   simm8 = (0,7) signed
;

define token data16 (16)
   imm16 = (0,15)
   simm16 = (0,15) signed
;

define token data32 (32)
   imm32 = (0,31)
   simm32 = (0,31) signed
;

define token data64 (64)
   imm64 = (0,63)
   simm64 = (0,63) signed
;

define context ctx
  ctx_op1=(0,1)
  ctx_op2=(2,3)
  ctx_rep=(4,4)
  ctx_n=(5,8)
  ctx_i=(9,12)
;

attach variables [ r8 r8_2 ] [
    R00 R01 R02 R03 R04 R05 R06 R07 R08 R09 R0A R0B R0C R0D R0E R0F
    R10 R11 R12 R13 R14 R15 R16 R17 R18 R19 R1A R1B R1C R1D R1E R1F
    R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R2A R2B R2C R2D R2E R2F
    R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R3A R3B R3C R3D R3E R3F
    R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R4A R4B R4C R4D R4E R4F
    R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R5A R5B R5C R5D R5E R5F
    R60 R61 R62 R63 R64 R65 R66 R67 R68 R69 R6A R6B R6C R6D R6E R6F
    R70 R71 R72 R73 R74 R75 R76 R77 R78 R79 R7A R7B R7C R7D R7E R7F
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
];
attach variables [ r8_00_06 w_r8_00_06 ] [
    R00 R01 R02 R03 R04 R05 R06 R07 R08 R09 R0A R0B R0C R0D R0E R0F
    R10 R11 R12 R13 R14 R15 R16 R17 R18 R19 R1A R1B R1C R1D R1E R1F
    R20 R21 R22 R23 R24 R25 R26 R27 R28 R29 R2A R2B R2C R2D R2E R2F
    R30 R31 R32 R33 R34 R35 R36 R37 R38 R39 R3A R3B R3C R3D R3E R3F
    R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R4A R4B R4C R4D R4E R4F
    R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R5A R5B R5C R5D R5E R5F
    R60 R61 R62 R63 R64 R65 R66 R67 R68 R69 R6A R6B R6C R6D R6E R6F
    R70 R71 R72 R73 R74 R75 R76 R77 R78 R79 R7A R7B R7C R7D R7E R7F
];
attach variables [ w_mem_r8_00_06 ] [
    R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R4A R4B R4C R4D R4E R4F
    R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R5A R5B R5C R5D R5E R5F
    R60 R61 R62 R63 R64 R65 R66 R67 R68 R69 R6A R6B R6C R6D R6E R6F
    R70 R71 R72 R73 R74 R75 R76 R77 R78 R79 R7A R7B R7C R7D R7E R7F
    R40 R41 R42 R43 R44 R45 R46 R47 R48 R49 R4A R4B R4C R4D R4E R4F
    R50 R51 R52 R53 R54 R55 R56 R57 R58 R59 R5A R5B R5C R5D R5E R5F
    R60 R61 R62 R63 R64 R65 R66 R67 R68 R69 R6A R6B R6C R6D R6E R6F
    R70 R71 R72 R73 R74 R75 R76 R77 R78 R79 R7A R7B R7C R7D R7E R7F
];


# Macros

macro setZFlags(op1) {
    $(ZH_flag) = op1 & 0xf0;
    $(ZL_flag) = op1 & 0x0f;
    $(Z_flag)  = $(ZH_flag) & $(ZL_flag);
}

macro setCFlags() {
    $(CL_flag) = 0;
    $(C_flag) = 0;
}

macro setAddFlags(op1, tmp_op1, tmp_op2) {
    setZFlags(op1);
    $(C_flag) = tmp_op1 < tmp_op2;
}

macro ioWrite(addr,val) {
   *[io]:1 addr = val;
}

macro ioRead(addr,dest) {
   dest = *[io]:1 addr;
}

macro push16(x) {
    local stack_addr:4 = segment(SS,SP);
    SP = SP - 2;
    *:2 stack_addr = x;
}

macro pop16(x) {
    local stack_addr:4 = segment(SS,SP);
    x = *:2 stack_addr;
    SP = SP + 2;
}

macro shl_r(op1, op2) { *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) << op2; }
macro shl_m(op1, op2) { *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) << op2; }

macro shr_r(op1, op2) { *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) >> op2; }
macro shr_m(op1, op2) { *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) >> op2; }

macro msk(op1, op2) {
    $(ZH_flag) = (op1 & op2 & 0xf0) == (op2 & 0xf0);
    $(ZL_flag) = (op1 & op2 & 0x0f) == (op2 & 0x0f);
    $(Z_flag)  = $(ZH_flag) & $(ZL_flag);
    setCFlags();
}

macro mov_r(op1, op2) { *[register]:1 (&op1 + I) = op2; }
macro mov_m(op1, op2) { *:1 (op1 + zext(I)) = op2; }

macro tst(op1, op2) {
    $(ZH_flag) = op1 & op2 & 0xf0;
    $(ZL_flag) = op1 & op2 & 0x0f;
    $(Z_flag)  = $(ZH_flag) & $(ZL_flag);
    setCFlags();
}

macro xor_r(op1, op2) {
    *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) ^ op2;
    setZFlags(*[register]:1 (&op1 + I));
}

macro xor_m(op1, op2) {
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) ^ op2;
    setZFlags(*:1 (op1 + zext(I)));
}

macro cmp(op1, op2) {
    local tmp = op1 - op2;
    setAddFlags(tmp, op1, op2);
}

macro cmpadd(op1, op2) {
    local tmp = op1 + op2;
    setAddFlags(tmp, op1, op2);
}

macro or_r(op1, op2) {
    *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) | op2;
    setZFlags(*[register]:1 (&op1 + I));
}

macro or_m(op1, op2) {
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) | op2;
    setZFlags(*:1 (op1 + zext(I)));
}

macro and_r(op1, op2) {
    *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) & op2;
    setZFlags(*[register]:1 (&op1 + I));
}

macro and_m(op1, op2) {
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) & op2;
    setZFlags(*:1 (op1 + zext(I)));
}

macro sbb_r(op1, op2) {
    local tmp_op1 = *[register]:1 (&op1 + I);
    *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) - op2;
    setAddFlags(*[register]:1 (&op1 + I), tmp_op1, op2);
}

macro sub_r(op1, op2) {
    local tmp_op1 = *[register]:1 (&op1 + I);
    *[register]:1 (&op1 + I) = tmp_op1 - op2;
    setAddFlags(*[register]:1 (&op1 + I), tmp_op1, op2);
}

macro adb_r(op1, op2) {
    local tmp_op1 = *[register]:1 (&op1 + I);
    *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) + op2;
    setAddFlags(*[register]:1 (&op1 + I), tmp_op1, op2);
}

macro add_r(op1, op2) {
    local tmp_op1 = *[register]:1 (&op1 + I);
    *[register]:1 (&op1 + I) = *[register]:1 (&op1 + I) + op2;
    setAddFlags(*[register]:1 (&op1 + I), tmp_op1, op2);
}

macro sbb_m(op1, op2) {
    local tmp_op1 = *:1 (op1 + zext(I));
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) - op2;
    setAddFlags(*:1 (op1 + zext(I)), tmp_op1, op2);
}

macro sub_m(op1, op2) {
    local tmp_op1 = *:1 (op1 + zext(I));
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) - op2;
    setAddFlags(*:1 (op1 + zext(I)), tmp_op1, op2);
}

macro adb_m(op1, op2) {
    local tmp_op1 = *:1 (op1 + zext(I));
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) + op2;
    setAddFlags(*:1 (op1 + zext(I)), tmp_op1, op2);
}

macro add_m(op1, op2) {
    local tmp_op1 = *:1 (op1 + zext(I));
    *:1 (op1 + zext(I)) = *:1 (op1 + zext(I)) + op2;
    setAddFlags(*:1 (op1 + zext(I)), tmp_op1, op2);
}

macro ld_rep(imm, pre_inc, post_inc, op1, op2) {
    local i = imm;
<cycle>
    if (i == 0:1) goto <end>;
    op1 = op1 + pre_inc;
    local op1_addr:4 = segment(DS, op1);
    local op2_addr:4 = zext(op2 + zext(i));
    *:1 op1_addr = *:1 op2_addr;
    op1 = op1 + post_inc;
    i = i - 1:1;
    goto <cycle>;
<end>
}

macro swp(op1, op2) {
    local tmp_op1 = op1;
    op1 = op2;
    op2 = tmp_op1;
}

macro swp_r(op1, op2) {
    local tmp_op1 = *[register]:1 (&op1 + I);
    *[register]:1 (&op1 + I) = *[register]:1 (&op2 + I);
    *[register]:1 (&op2 + I) = tmp_op1;
}

# Operands
op2_8:   r8_00_06  is op2_type=0b0 & r8_00_06  { export r8_00_06;  }
op2_8:   imm_00_06 is op2_type=0b1 & imm_00_06 { export imm_00_06; }

w_mem:   w_mem_r8_00_06 is w_mem_r8_00_06                          { local data_addr:4 = segment(DS, w_mem_r8_00_06); export data_addr; }
w_op2r0: r8_00_06       is w_type_07=0b0 ; op2_type=0b0 & r8_00_06 { export r8_00_06; }
w_op2r1: r8_00_06       is w_type_07=0b0 ; op2_type=0b1 & r8_00_06 { export r8_00_06; }
w_op2r:  r8_00_06       is w_type_07=0b0 ; r8_00_06                { export r8_00_06; }
w_op2i:  imm8           is w_type_07=0b1 ; imm8                    { local tmp:1 = imm8; export tmp; }

# Absolute
addr16:   imm16 is imm16 { local tmp:4 = ((inst_next >> 16) << 16) | zext(imm16:2); export tmp; }
addr16r8: r8    is r8    { local tmp:4 = ((inst_next >> 16) << 16) | zext(r8); export tmp; }
addr16f:  offs  is imm8 ; imm16 [ offs = imm8 * 0x10000 + imm16; ] { CS = imm8; local tmp:4 = offs; export tmp; }

cc: "ZH"  is flags_00_02=0x0 { c:1 = $(ZH_flag); export c; }
cc: "ZL"  is flags_00_02=0x1 { c:1 = $(ZL_flag); export c; }
cc: "C"   is flags_00_02=0x2 { c:1 = $(C_flag); export c; }
cc: "Z"   is flags_00_02=0x3 { c:1 = $(Z_flag); export c; }
cc: "NZH" is flags_00_02=0x4 { c:1 = $(ZH_flag) == 0; export c; }
cc: "NZL" is flags_00_02=0x5 { c:1 = $(ZL_flag) == 0; export c; }
cc: "NC"  is flags_00_02=0x6 { c:1 = $(C_flag) == 0; export c; }
cc: "NZ"  is flags_00_02=0x7 { c:1 = $(Z_flag) == 0; export c; }

:^instruction is w_op_15=0b1 & instruction [ctx_rep=0;] { build instruction; }
:^instruction is w_op_15=0b0 & w_rep_08_09=0b00 & instruction & ctx_rep=0 [ctx_rep=1; ctx_n=1;] { I=0; build instruction; }
:^instruction is w_op_15=0b0 & w_rep_08_09=0b01 & instruction & ctx_rep=0 [ctx_rep=1; ctx_n=2;] { I=0; <i> if (I==2) goto inst_next; build instruction; I=I+1; goto <i>; }
:^instruction is w_op_15=0b0 & w_rep_08_09=0b10 & instruction & ctx_rep=0 [ctx_rep=1; ctx_n=4;] { I=0; <i> if (I==4) goto inst_next; build instruction; I=I+1; goto <i>; }
:^instruction is w_op_15=0b0 & w_rep_08_09=0b11 & instruction & ctx_rep=0 [ctx_rep=1; ctx_n=8;] { I=0; <i> if (I==8) goto inst_next; build instruction; I=I+1; goto <i>; }

# 0x00..0x0f
:shl^"#"^ctx_n w_r8_00_06,8      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0000) & w_type_07=0b0 { shl_r(w_r8_00_06, 8); }
:shr^"#"^ctx_n w_r8_00_06,8      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0000) & w_type_07=0b1 { shr_r(w_r8_00_06, 8); }
:shl^"#"^ctx_n (w_mem),8         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0000) & w_type_07=0b0      { shl_m(w_mem, 8); }
:shr^"#"^ctx_n (w_mem),8         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0000) & w_type_07=0b1      { shr_m(w_mem, 8); }
:msk^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0001) ... & w_op2r    { msk(*[register]:1 (&w_r8_00_06 + I), *[register]:1 (&w_op2r + I)); }
:msk^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0001) ... & w_op2i    { msk(*[register]:1 (&w_r8_00_06 + I), w_op2i); }
:msk^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0001) ... & w_op2r0        { msk(*[register]:1 (&w_op2r0 + I), *:1 (w_mem + zext(I))); }
:msk^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0001) ... & w_op2r1        { msk(*:1 (w_mem + zext(I)), *[register]:1 (&w_op2r1 + I)); }
:msk^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0001) ... & w_op2i         { msk(*:1 (w_mem + zext(I)), w_op2i); }
:shl^"#"^ctx_n w_r8_00_06,4      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0010) & w_type_07=0b0 { shl_r(w_r8_00_06, 4); }
:shr^"#"^ctx_n w_r8_00_06,4      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0010) & w_type_07=0b1 { shr_r(w_r8_00_06, 4); }
:shl^"#"^ctx_n (w_mem),4         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0010) & w_type_07=0b0      { shl_m(w_mem, 4); }
:shr^"#"^ctx_n (w_mem),4         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0010) & w_type_07=0b1      { shr_m(w_mem, 4); }
:tst^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0011) ... & w_op2r    { tst(*[register]:1 (&w_r8_00_06 + I), *[register]:1 (&w_op2r + I)); }
:tst^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0011) ... & w_op2i    { tst(*[register]:1 (&w_r8_00_06 + I), w_op2i); }
:tst^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0011) ... & w_op2r0        { tst(*[register]:1 (&w_op2r0 + I), *:1 (w_mem + zext(I))); }
:tst^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0011) ... & w_op2r1        { tst(*:1 (w_mem + zext(I)), *[register]:1 (&w_op2r1 + I)); }
:tst^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0011) ... & w_op2i         { tst(*:1 (w_mem + zext(I)), w_op2i); }

# 0x10..0x1f
:xor^"#"^ctx_n w_r8_00_06,w_op2r    is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0100) ... & w_op2r { xor_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:xor^"#"^ctx_n w_r8_00_06,w_op2i    is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0100) ... & w_op2i { xor_r(w_r8_00_06, w_op2i); }
:xor^"#"^ctx_n w_op2r0,(w_mem)      is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0100) ... & w_op2r0     { xor_r(w_op2r0, *:1 (w_mem + zext(I))); }
:xor^"#"^ctx_n (w_mem),w_op2r1      is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0100) ... & w_op2r1     { xor_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:xor^"#"^ctx_n (w_mem),w_op2i       is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0100) ... & w_op2i      { xor_m(w_mem, w_op2i); }
:cmp^"#"^ctx_n w_r8_00_06,w_op2r    is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0101) ... & w_op2r { cmp(*[register]:1 (&w_r8_00_06 + I), *[register]:1 (&w_op2r + I)); }
:cmp^"#"^ctx_n w_r8_00_06,w_op2i    is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0101) ... & w_op2i { cmp(*[register]:1 (&w_r8_00_06 + I), w_op2i); }
:cmp^"#"^ctx_n w_op2r0,(w_mem)      is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0101) ... & w_op2r0     { cmp(*[register]:1 (&w_op2r0 + I), *:1 (w_mem + zext(I))); }
:cmp^"#"^ctx_n (w_mem),w_op2r1      is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0101) ... & w_op2r1     { cmp(*:1 (w_mem + zext(I)), *[register]:1 (&w_op2r1 + I)); }
:cmp^"#"^ctx_n (w_mem),w_op2i       is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0101) ... & w_op2i      { cmp(*:1 (w_mem + zext(I)), w_op2i); }
:ld^"#"^ctx_n w_r8_00_06,w_op2r     is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0110) ... & w_op2r { mov_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:ld^"#"^ctx_n w_r8_00_06,w_op2i     is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0110) ... & w_op2i { mov_r(w_r8_00_06, w_op2i); }
:ld^"#"^ctx_n w_op2r0,(w_mem)       is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0110) ... & w_op2r0     { mov_r(w_op2r0, *:1 (w_mem + zext(I))); }
:ld^"#"^ctx_n (w_mem),w_op2r1       is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0110) ... & w_op2r1     { mov_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:ld^"#"^ctx_n (w_mem),w_op2i        is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0110) ... & w_op2i      { mov_m(w_mem, w_op2i); }
:cmpadd^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0111) ... & w_op2r { cmpadd(*[register]:1 (&w_r8_00_06 + I), *[register]:1 (&w_op2r + I)); }
:cmpadd^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b0111) ... & w_op2i { cmpadd(*[register]:1 (&w_r8_00_06 + I), w_op2i); }
:cmpadd^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0111) ... & w_op2r0     { cmpadd( *[register]:1 (&w_op2r0 + I), *:1 (w_mem + zext(I))); }
:cmpadd^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0111) ... & w_op2r1     { cmpadd(*:1 (w_mem + zext(I)), *[register]:1 (&w_op2r1 + I)); }
:cmpadd^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b0111) ... & w_op2i      { cmpadd(*:1 (w_mem + zext(I)), w_op2i); }

# 0x20..0x2f
:shl^"#"^ctx_n w_r8_00_06,1      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1000) & w_type_07=0b0 { shl_r(w_r8_00_06, 8); }
:shr^"#"^ctx_n w_r8_00_06,1      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1000) & w_type_07=0b1 { shr_r(w_r8_00_06, 8); }
:shl^"#"^ctx_n (w_mem),1         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1000) & w_type_07=0b0      { shl_m(w_mem, 8); }
:shr^"#"^ctx_n (w_mem),1         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1000) & w_type_07=0b1      { shr_m(w_mem, 8); }
:or^"#"^ctx_n w_r8_00_06,w_op2r  is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1001) ... & w_op2r    { or_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:or^"#"^ctx_n w_r8_00_06,w_op2i  is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1001) ... & w_op2i    { or_r(w_r8_00_06, w_op2i); }
:or^"#"^ctx_n w_op2r0,(w_mem)    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1001) ... & w_op2r0        { or_r(w_op2r0, *:1 (w_mem + zext(I))); }
:or^"#"^ctx_n (w_mem),w_op2r1    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1001) ... & w_op2r1        { or_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:or^"#"^ctx_n (w_mem),w_op2i     is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1001) ... & w_op2i         { or_m(w_mem, w_op2i); }
:shl^"#"^ctx_n w_r8_00_06,1      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1010) & w_type_07=0b0 { shl_r(w_r8_00_06, 4); }
:shr^"#"^ctx_n w_r8_00_06,1      is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1010) & w_type_07=0b1 { shr_r(w_r8_00_06, 4); }
:shl^"#"^ctx_n (w_mem),1         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1010) & w_type_07=0b0      { shl_m(w_mem, 4); }
:shr^"#"^ctx_n (w_mem),1         is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1010) & w_type_07=0b1      { shr_m(w_mem, 4); }
:and^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1011) ... & w_op2r    { and_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:and^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1011) ... & w_op2i    { and_r(w_r8_00_06, w_op2i); }
:and^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1011) ... & w_op2r0        { and_r(w_op2r0, *:1 (w_mem + zext(I))); }
:and^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1011) ... & w_op2r1        { and_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:and^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1011) ... & w_op2i         { and_m(w_mem, w_op2i); }

# 0x30..0x3f
:sbb^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1100) ... & w_op2r { sbb_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:sbb^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1100) ... & w_op2i { sbb_r(w_r8_00_06, w_op2i); }
:sbb^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1100) ... & w_op2r0     { sbb_r(w_op2r0, *:1 (w_mem + zext(I))); }
:sbb^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1100) ... & w_op2r1     { sbb_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:sbb^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1100) ... & w_op2i      { sbb_m(w_mem, w_op2i); }
:sub^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1101) ... & w_op2r { sub_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:sub^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1101) ... & w_op2i { sub_r(w_r8_00_06, w_op2i); }
:sub^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1101) ... & w_op2r0     { sub_r(w_op2r0, *:1 (w_mem + zext(I))); }
:sub^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1101) ... & w_op2r1     { sub_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:sub^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1101) ... & w_op2i      { sub_m(w_mem, w_op2i); }
:adb^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1110) ... & w_op2r { adb_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:adb^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1110) ... & w_op2i { adb_r(w_r8_00_06, w_op2i); }
:adb^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1110) ... & w_op2r0     { adb_r(w_op2r0, *:1 (w_mem + zext(I))); }
:adb^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1110) ... & w_op2r1     { adb_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:adb^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1110) ... & w_op2i      { adb_m(w_mem, w_op2i); }
:add^"#"^ctx_n w_r8_00_06,w_op2r is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1111) ... & w_op2r { add_r(w_r8_00_06, *[register]:1 (&w_op2r + I)); }
:add^"#"^ctx_n w_r8_00_06,w_op2i is (ctx_n & ctx_rep=1 & w_r8_00_06 & w_mode_14=0b0 & w_op_10_13=0b1111) ... & w_op2i { add_r(w_r8_00_06, w_op2i); }
:add^"#"^ctx_n w_op2r0,(w_mem)   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1111) ... & w_op2r0     { add_r(w_op2r0, *:1 (w_mem + zext(I))); }
:add^"#"^ctx_n (w_mem),w_op2r1   is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1111) ... & w_op2r1     { add_m(w_mem, *[register]:1 (&w_op2r1 + I)); }
:add^"#"^ctx_n (w_mem),w_op2i    is (ctx_n & ctx_rep=1 & w_mem & w_mode_14=0b1 & w_op_10_13=0b1111) ... & w_op2i      { add_m(w_mem, w_op2i); }

:unk_83 is op_00_07=0x83 { unk_83(); }
:jmp addr16 is op_00_07=0x88 ; addr16 {
    goto [addr16];
}
:jmpf addr16f is op_00_07=0x89 ; addr16f {
    goto [addr16f];
}
:call addr16 is op_00_07=0x8a ; addr16 {
    push16(&:4 inst_next);
    call [addr16];
}
:ld [(LAR^"-"),(SP^"-")] is LAR & SP & op_00_07=0x8c {
    local i = DSIZE + 1;
<cycle>
    if (i == 0:1) goto <end>;
    local stack_addr:4 = segment(SS, SP);
    local data_addr:4 = segment(DS, LAR);
    *:1 data_addr = *:1 stack_addr;
    SP = SP - 1;
    LAR = LAR - 1;
    i = i - 1:1;
    goto <cycle>;
<end>
}
:ld [(LAR^"+"),(SP^"+")] is LAR & SP & op_00_07=0x8d {
    local i = DSIZE + 1;
<cycle>
    if (i == 0:1) goto <end>;
    local stack_addr:4 = segment(SS, SP);
    local data_addr:4 = segment(DS, LAR);
    *:1 data_addr = *:1 stack_addr;
    SP = SP + 1;
    LAR = LAR + 1;
    i = i - 1:1;
    goto <cycle>;
<end>
}
:unk_8e is op_00_07=0x8e { unk_8e(); }

:ret cc is op_03_07=0b10010 & cc & flags_00_02 {
    if (!cc) goto inst_next;
    pop16(IP);
    return [IP];
}
:jmp addr16r8 is op_00_07=0x98 ; addr16r8 {
    goto [addr16r8];
}
:reti is op_00_07=0x9e {
    pop16(IP);
    return [IP];
}
:ret is op_00_07=0x9f {
    pop16(IP);
    return [IP];
}

:jmp  cc, addr16 is op_03_07=0b10100 & cc & flags_00_02 ; addr16 {
    if (!cc) goto inst_next;
    goto [addr16];
}
:call cc, addr16 is op_03_07=0b10101 & cc & flags_00_02 ; addr16 {
    if (!cc) goto inst_next;
    push16(&:4 inst_next);
    call [addr16];
}

:port_ctrl imm8     is op_00_07=0xb1; imm8     { port_ctrl(imm8:1); }
:timer_set imm8     is op_00_07=0xb3; imm8     { timer_set(imm8:1); }
:out "KOH",r8_00_06 is op_00_07=0xb4; r8_00_06 { ioWrite($(KOH):1, r8_00_06); }
:out "KOH",imm8     is op_00_07=0xb5; imm8     { ioWrite($(KOH):1, imm8:1); }
:out "KOL",r8_00_06 is op_00_07=0xb6; r8_00_06 { ioWrite($(KOL):1, r8_00_06); }
:out "KOL",imm8     is op_00_07=0xb7; imm8     { ioWrite($(KOL):1, imm8:1); }
:unk_b9 imm8        is op_00_07=0xb9; imm8     { unk_b9(imm8:1); }
:unk_bc imm8        is op_00_07=0xbc; imm8     { unk_bc(imm8:1); }

:jmp "CL", addr16  is op_00_07=0xbb ; addr16 {
    if ($(CL_flag) == 0) goto inst_next;
    goto [addr16];
}
:jmp "NCL", addr16 is op_00_07=0xbf ; addr16 {
    if ($(CL_flag) == 1) goto inst_next;
    goto [addr16];
}

:ld^"#1" r8_00_06,imm8                      is op_00_07=0xc0 ; r8_00_06 ; imm8                            { r8_00_06 = imm8; }
:ld^"#2" r8_00_06,imm8,imm8_2               is op_00_07=0xc1 ; r8_00_06 ; imm8 ; imm8_2                   { r8_00_06 = imm8; *[register]:1 (&r8_00_06 + 1:1) = imm8_2; }
:ld^"#4" r8_00_06,imm8,imm8_2,imm8_3,imm8_4 is op_00_07=0xc2 ; r8_00_06 ; imm8 ; imm8_2 ; imm8_3 ; imm8_4 {
    r8_00_06 = imm8;
    *[register]:1 (&r8_00_06 + 1:1) = imm8_2;
    *[register]:1 (&r8_00_06 + 2:1) = imm8_3;
    *[register]:1 (&r8_00_06 + 3:1) = imm8_4;
}
:ld^"#8" r8_00_06,imm8,imm8_2,imm8_3,imm8_4,imm8_5,imm8_6,imm8_7,imm8_8 is op_00_07=0xc3 ; r8_00_06 ; imm8 ; imm8_2 ; imm8_3 ; imm8_4 ; imm8_5 ; imm8_6 ; imm8_7 ; imm8_8  {
    r8_00_06 = imm8;
    *[register]:1 (&r8_00_06 + 1:1) = imm8_2;
    *[register]:1 (&r8_00_06 + 2:1) = imm8_3;
    *[register]:1 (&r8_00_06 + 3:1) = imm8_4;
    *[register]:1 (&r8_00_06 + 4:1) = imm8_5;
    *[register]:1 (&r8_00_06 + 5:1) = imm8_6;
    *[register]:1 (&r8_00_06 + 6:1) = imm8_7;
    *[register]:1 (&r8_00_06 + 7:1) = imm8_8;
}
:ld (LAR),op2_8 is op_00_07=0xc4 ; op_00_07=0x00 ; LAR & op2_8 { ld_rep(1, 0, 1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc4 ; op_00_07=0x20 ; LAR & op2_8 { ld_rep(1, 1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc4 ; op_00_07=0x40 ; LAR & op2_8 { ld_rep(1, 0,-1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc4 ; op_00_07=0x60 ; LAR & op2_8 { ld_rep(1,-1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc5 ; op_00_07=0x00 ; LAR & op2_8 { ld_rep(2, 0, 1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc5 ; op_00_07=0x20 ; LAR & op2_8 { ld_rep(2, 1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc5 ; op_00_07=0x40 ; LAR & op2_8 { ld_rep(2, 0,-1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc5 ; op_00_07=0x60 ; LAR & op2_8 { ld_rep(2,-1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc6 ; op_00_07=0x00 ; LAR & op2_8 { ld_rep(3, 0, 1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc6 ; op_00_07=0x20 ; LAR & op2_8 { ld_rep(3, 1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc6 ; op_00_07=0x40 ; LAR & op2_8 { ld_rep(3, 0,-1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc6 ; op_00_07=0x60 ; LAR & op2_8 { ld_rep(3,-1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc7 ; op_00_07=0x00 ; LAR & op2_8 { ld_rep(4, 0, 1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc7 ; op_00_07=0x20 ; LAR & op2_8 { ld_rep(4, 1, 0,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc7 ; op_00_07=0x40 ; LAR & op2_8 { ld_rep(4, 0,-1,LAR,op2_8); }
:ld (LAR),op2_8 is op_00_07=0xc7 ; op_00_07=0x60 ; LAR & op2_8 { ld_rep(4,-1, 0,LAR,op2_8); }
:ld op2_8,(LAR) is op_00_07=0xc4 ; op_00_07=0x80 ; LAR & op2_8 { ld_rep(1, 0, 1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc4 ; op_00_07=0xa0 ; LAR & op2_8 { ld_rep(1, 1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc4 ; op_00_07=0xc0 ; LAR & op2_8 { ld_rep(1, 0,-1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc4 ; op_00_07=0xe0 ; LAR & op2_8 { ld_rep(1,-1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc5 ; op_00_07=0x80 ; LAR & op2_8 { ld_rep(2, 0, 1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc5 ; op_00_07=0xa0 ; LAR & op2_8 { ld_rep(2, 1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc5 ; op_00_07=0xc0 ; LAR & op2_8 { ld_rep(2, 0,-1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc5 ; op_00_07=0xe0 ; LAR & op2_8 { ld_rep(2,-1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc6 ; op_00_07=0x80 ; LAR & op2_8 { ld_rep(3, 0, 1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc6 ; op_00_07=0xa0 ; LAR & op2_8 { ld_rep(3, 1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc6 ; op_00_07=0xc0 ; LAR & op2_8 { ld_rep(3, 0,-1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc6 ; op_00_07=0xe0 ; LAR & op2_8 { ld_rep(3,-1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc7 ; op_00_07=0x80 ; LAR & op2_8 { ld_rep(4, 0, 1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc7 ; op_00_07=0xa0 ; LAR & op2_8 { ld_rep(4, 1, 0,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc7 ; op_00_07=0xc0 ; LAR & op2_8 { ld_rep(4, 0,-1,op2_8,LAR); }
:ld op2_8,(LAR) is op_00_07=0xc7 ; op_00_07=0xe0 ; LAR & op2_8 { ld_rep(4,-1, 0,op2_8,LAR); }

:swp^"#1" r8_2,r8 is op_00_07=0xcc ; r8_2 ; r8 { swp(r8_2, r8); }
:swp^"#2" r8_2,r8 is op_00_07=0xcd ; r8_2 ; r8 { I=0; <i> if (I==2) goto inst_next; swp_r(r8_2, r8); I=I+1; goto <i>; }
:swp^"#4" r8_2,r8 is op_00_07=0xce ; r8_2 ; r8 { I=0; <i> if (I==4) goto inst_next; swp_r(r8_2, r8); I=I+1; goto <i>; }
:swp^"#8" r8_2,r8 is op_00_07=0xcf ; r8_2 ; r8 { I=0; <i> if (I==8) goto inst_next; swp_r(r8_2, r8); I=I+1; goto <i>; }

:ld CS,r8_00_06    is op_00_07=0xd0 & CS;    r8_00_06 { CS = r8_00_06; }
:ld CS,imm8        is op_00_07=0xd1 & CS;    imm8     { CS = imm8; }
:ld DSIZE,r8_00_06 is op_00_07=0xd2 & DSIZE; r8_00_06 { DSIZE = r8_00_06; }
:ld DSIZE,imm8     is op_00_07=0xd3 & DSIZE; imm8     { DSIZE = imm8; }
:ld SS,r8_00_06    is op_00_07=0xd4 & SS;    r8_00_06 { SS = r8_00_06; }
:ld SS,imm8        is op_00_07=0xd5 & SS;    imm8     { SS = imm8; }
:ld SP,r8_00_06    is op_00_07=0xd6 & SP;    r8_00_06 { SP = (zext(r8_00_06) << 8) | zext(*[register]:1 (&r8_00_06 + 1:1)); }
:ld SP,imm16       is op_00_07=0xd7 & SP;    imm16    { SP = imm16; }
:ld F,r8_00_06     is op_00_07=0xd8 & F;     r8_00_06 { F = r8_00_06; }
:ld F,imm8         is op_00_07=0xd9 & F;     imm8     { F = imm8; }
:ld DS,r8_00_06    is op_00_07=0xdc & DS;    r8_00_06 { DS = r8_00_06; }
:ld DS,imm8        is op_00_07=0xdd & DS;    imm8     { DS = imm8; }
:ld LAR,r8_00_06   is op_00_07=0xde & LAR;   r8_00_06 { LAR = (zext(r8_00_06) << 8) | zext(*[register]:1 (&r8_00_06 + 1:1)); }
:ld LAR,imm16      is op_00_07=0xdf & LAR;   imm16    { LAR = imm16; }

:ld r8_00_06,"IN0"     is op_00_07=0xe0;             r8_00_06 { ioRead($(IN0):1, r8_00_06); }
:ld r8_00_06,"OPT"     is op_00_07=0xe1;             r8_00_06 { ioRead($(OPT):1, r8_00_06); }
:ld r8_00_06,"KI"      is op_00_07=0xe2;             r8_00_06 { ioRead($(KI):1, r8_00_06); }
:ld r8_00_06,DSIZE     is op_00_07=0xe3 & DSIZE;     r8_00_06 { r8_00_06 = DSIZE; }
:ld r8_00_06,F         is op_00_07=0xe4 & F;         r8_00_06 { r8_00_06 = F; }
:ld r8_00_06,"PORT"    is op_00_07=0xe6;             r8_00_06 { ioRead($(PORT):1, r8_00_06); }
:ld r8_00_06,LAR       is op_00_07=0xe8 & LAR;       r8_00_06 { r8_00_06 = LAR(1); *[register]:1 (&r8_00_06 + 1:1) = LAR:1; }
:ld r8_00_06,IP        is op_00_07=0xea & IP;        r8_00_06 { r8_00_06 = IP(1); *[register]:1 (&r8_00_06 + 1:1) = IP:1; }
:ld r8_00_06,SP        is op_00_07=0xeb & SP;        r8_00_06 { r8_00_06 = SP(1); *[register]:1 (&r8_00_06 + 1:1) = SP:1; }
:ld r8_00_06,DS        is op_00_07=0xed & DS;        r8_00_06 { r8_00_06 = DS; }
:ld r8_00_06,CS        is op_00_07=0xee & CS;        r8_00_06 { r8_00_06 = CS; }
:ld r8_00_06,SS        is op_00_07=0xef & SS;        r8_00_06 { r8_00_06 = SS; }
:in r8_00_06,imm_00_03 is op_04_07=0xe  & imm_00_03; r8_00_06 { ioRead(0xe0 + imm_00_03:1, r8_00_06); }

:out "OPT",r8     is op_00_07=0xf0 ; r8   { ioWrite($(OPT):1, r8); }
:out "PORT",r8    is op_00_07=0xf2 ; r8   { ioWrite($(PORT):1, r8); }
:timer_ctrl imm8  is op_00_07=0xf7 ; imm8 { timer_ctrl(imm8:1); }
:unk_fc           is op_00_07=0xfc { unk_fc(); }
:unk_fd           is op_00_07=0xfd { unk_fd(); }
:timer_wait       is op_00_07=0xfe { timer_wait(); }
:out imm_00_03,r8 is op_04_07=0xf  & imm_00_03; r8 { ioWrite(0xe0 + imm_00_03:1, r8); }

:nop is op_00_07=0xff {}
